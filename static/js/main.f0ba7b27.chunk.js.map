{"version":3,"sources":["utils/duration/index.js","pomodoro/Countdown.js","pomodoro/ProgressBar.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round","Countdown","session","focusDuration","breakDuration","className","data-testid","label","givenMinutes","minutesToDuration","timeRemaining","ProgressBar","progressBarFunction","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","type","onClick","disabled","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0ba7b27.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\nimport {minutesToDuration, secondsToDuration} from '../utils/duration';\n\n\nfunction Countdown({session, focusDuration, breakDuration}) {\n    return(\n        // TODO: This area should show only when there is an active focus or break - i.e. the session is running or is pause\n        !session ? null : (\n        <div className=\"row mb-2\">\n            \n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {session.label} for {minutesToDuration(session.label === \"On Break\" ? breakDuration : focusDuration)} minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n          </div>\n        </div>\n        )\n    )\n}\n\nexport default Countdown;","import React from \"react\";\n\nfunction ProgressBar({progressBarFunction}){\n    return (\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progressBarFunction()} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressBarFunction()}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n    )\n}\n\n\nexport default ProgressBar;","import React, { useState } from \"react\";\nimport {minutesToDuration, secondsToDuration} from '../utils/duration';\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport Countdown from './Countdown';\nimport ProgressBar from './ProgressBar';\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  //callback function to stop the session\n  const stopSession = () => {!isTimerRunning ? setIsTimerRunning(false) : setSession(null)}\n  \n  //functions to change duration of sessions\n  const increaseFocus = () => {\n    if(focusDuration < 60) setFocusDuration(focusDuration+5);\n  };\n  const decreaseFocus = () => {\n    if(focusDuration > 5) setFocusDuration(focusDuration-5)\n  };\n  const increaseBreak = () => {\n    if(breakDuration < 15) setBreakDuration(breakDuration+1)\n  };\n  const decreaseBreak = () => {\n    if(breakDuration > 1) setBreakDuration(breakDuration-1);\n  };\n\n\n  \n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if(!session) return null;\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  //dynamically update progress bar referring to duration of sesssion\n  function progressBar(){\n     if(!session) return null;\n     if(session.label === \"Focusing\") return 100 - (((session.timeRemaining)/(focusDuration*60)) * 100);\n     else return 100 - (((session.timeRemaining)/(breakDuration*60)) * 100);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {focusDuration === 60 ? \"60:00\" : secondsToDuration(focusDuration * 60)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                onClick={decreaseFocus}\n                disabled={session}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                onClick={increaseFocus}\n                disabled={session}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {secondsToDuration(breakDuration * 60)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={decreaseBreak}\n                  disabled={session}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={increaseBreak}\n                  disabled={session}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={stopSession}\n              disabled={!session}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n          <Countdown session={session} focusDuration={focusDuration} breakDuration={breakDuration}/>\n          <ProgressBar progressBarFunction={progressBar}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}